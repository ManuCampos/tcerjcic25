import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import io
import re
import requests

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Projeto Predi√ß√£o de Editais - CIC2025",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado para interface profissional
st.markdown("""
<style>
    /* Tema principal */
    .main-header {
        background: linear-gradient(90deg, #1e3a8a 0%, #3b82f6 100%);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    
    .main-header h1 {
        color: white;
        margin: 0;
        font-weight: 600;
    }
    
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #3b82f6;
        margin: 0.5rem 0;
    }
    
    .filter-section {
        background: #f8fafc;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .alert-info {
        background: #dbeafe;
        border: 1px solid #3b82f6;
        color: #1e40af;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .alert-success {
        background: #dcfce7;
        border: 1px solid #16a34a;
        color: #15803d;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .alert-warning {
        background: #fef3c7;
        border: 1px solid #f59e0b;
        color: #92400e;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .sidebar .sidebar-content {
        background: #f1f5f9;
    }
    
    /* Estilo para m√©tricas */
    .metric-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin: 1rem 0;
    }
    
    /* Bot√µes personalizados */
    .stButton > button {
        background: linear-gradient(90deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
    }
    
    /* Estilo para selectbox */
    .stSelectbox > div > div {
        border-radius: 8px;
    }
    
    /* Tabelas */
    .dataframe {
        border-radius: 8px;
        overflow: hidden;
    }
    
    /* Loading spinner personalizado */
    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem;
    }
</style>
""", unsafe_allow_html=True)

# URL do SharePoint (pode precisar de autentica√ß√£o)
SHAREPOINT_URL = "https://tcerj365-my.sharepoint.com/:x:/g/personal/emanuellipc_tcerj_tc_br/EapYf2FOUAZKhwemlND9-yABORDNXmUQrevxWZHffU2wSg?e=gwyMcP"
# Tentativa de convers√£o para download direto
SHAREPOINT_CSV_URL = "https://tcerj365-my.sharepoint.com/:x:/g/personal/emanuellipc_tcerj_tc_br/EapYf2FOUAZKhwemlND9-yABORDNXmUQrevxWZHffU2wSg?e=gwyMcP&download=1"

@st.cache_data(ttl=300)  # Cache por 5 minutos
def load_data_from_sharepoint():
    """Carrega dados diretamente do SharePoint"""
    try:
        # Primeira tentativa - URL com download=1
        try:
            response = requests.get(SHAREPOINT_CSV_URL, timeout=30)
            response.raise_for_status()
        except:
            # Segunda tentativa - URL original
            response = requests.get(SHAREPOINT_URL, timeout=30)
            response.raise_for_status()
        
        # Primeiro, tenta o m√©todo padr√£o mais robusto
        try:
            df = pd.read_csv(
                io.StringIO(response.text),
                encoding='utf-8',
                sep=',',
                quotechar='"',
                escapechar='\\',
                on_bad_lines='skip',  # Pula linhas problem√°ticas
                engine='python',  # Engine mais tolerante
                dtype=str,  # Carrega tudo como string primeiro
                low_memory=False
            )
        except Exception as e1:
            # M√©todo alternativo - tenta com delimitador autom√°tico
            try:
                df = pd.read_csv(
                    io.StringIO(response.text),
                    sep=None,  # Detecta automaticamente o delimitador
                    engine='python',
                    encoding='utf-8',
                    on_bad_lines='skip',
                    dtype=str
                )
            except Exception as e2:
                # √öltimo recurso - verifica se √© HTML (p√°gina de login)
                if "<html" in response.text.lower() or "sign in" in response.text.lower():
                    return None, "SharePoint requer autentica√ß√£o - use upload manual ou configure permiss√µes p√∫blicas"
                
                return None, f"Erro de parsing: {str(e1)}. Tentativa alternativa: {str(e2)}"
        
        # Remove linhas completamente vazias
        df = df.dropna(how='all')
        
        # Remove colunas que s√£o completamente vazias ou t√™m nomes inv√°lidos
        df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
        df = df.dropna(axis=1, how='all')
        
        # Convers√µes de tipos mais seguras
        if 'data realizacao licitacao' in df.columns:
            df['data realizacao licitacao'] = pd.to_datetime(df['data realizacao licitacao'], errors='coerce')
        
        if 'ano' in df.columns:
            df['ano'] = pd.to_numeric(df['ano'], errors='coerce')
        
        if 'valor estimado' in df.columns:
            # Remove caracteres n√£o num√©ricos exceto pontos e v√≠rgulas
            df['valor estimado'] = df['valor estimado'].astype(str).str.replace(r'[^\d.,]', '', regex=True)
            df['valor estimado'] = df['valor estimado'].str.replace(',', '.', regex=False)
            df['valor estimado'] = pd.to_numeric(df['valor estimado'], errors='coerce')
        
        if 'pontuacao' in df.columns:
            df['pontuacao'] = df['pontuacao'].astype(str).str.replace(',', '.', regex=False)
            df['pontuacao'] = pd.to_numeric(df['pontuacao'], errors='coerce')
            
        if 'pontuacao_final' in df.columns:
            df['pontuacao_final'] = df['pontuacao_final'].astype(str).str.replace(',', '.', regex=False)
            df['pontuacao_final'] = pd.to_numeric(df['pontuacao_final'], errors='coerce')
        
        # Processamento da coluna observacoes - preenche valores em branco
        if 'observacoes' in df.columns:
            df['observacoes'] = df['observacoes'].apply(
                lambda x: x if pd.notna(x) and str(x).strip() != '' else 'Classifica√ß√£o baseada em Termos Chave'
            )
        
        # Renomea√ß√£o de colunas espec√≠ficas
        column_renames = {
            'classificacao_final - Copiar': 'Predi√ß√£o CIC',
            'predicao classificacao': 'Predi√ß√£o STI'
        }
        
        for old_name, new_name in column_renames.items():
            if old_name in df.columns:
                df = df.rename(columns={old_name: new_name})
        
        # Remo√ß√£o de duplicatas ignorando a coluna 'classificacao_final'
        columns_for_dedup = [col for col in df.columns if col != 'classificacao_final']
        if columns_for_dedup:
            df = df.drop_duplicates(subset=columns_for_dedup, keep='first')
        
        # Processamento da coluna observacoes - preenche valores em branco
        if 'observacoes' in df.columns:
            df['observacoes'] = df['observacoes'].apply(
                lambda x: x if pd.notna(x) and str(x).strip() != '' else 'Classifica√ß√£o baseada em Termos Chave'
            )
        
        # Valida√ß√£o final - se o dataframe est√° vazio ou muito pequeno
        if len(df) == 0:
            return None, "Nenhum dado v√°lido encontrado na planilha"
        
        if len(df.columns) < 5:
            return None, "Estrutura de dados incompleta - muito poucas colunas"
            
        return df, None
        
    except requests.exceptions.RequestException as e:
        if "403" in str(e) or "401" in str(e):
            return None, "Acesso negado - SharePoint requer permiss√µes ou autentica√ß√£o"
        return None, f"Erro de conex√£o: {str(e)}"
    except pd.errors.EmptyDataError:
        return None, "Planilha est√° vazia ou n√£o cont√©m dados v√°lidos"
    except pd.errors.ParserError as e:
        return None, f"Erro de formata√ß√£o dos dados: {str(e)}"
    except Exception as e:
        return None, f"Erro inesperado: {str(e)}"

def create_overview_metrics(df):
    """Cria m√©tricas de vis√£o geral com dados fixos da base completa"""
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìã Total de Editais",
            value="52.429",
            delta=None
        )
    
    with col2:
        st.metric(
            label="üí∞ Valor Total Estimado",
            value="R$ 244 Bilh√µes",
            delta=None
        )
    
    with col3:
        st.metric(
            label="üè∑Ô∏è Categorias √önicas",
            value="14",
            delta=None
        )
    
    with col4:
        st.metric(
            label="üè¢ Unidades √önicas",
            value="729",
            delta=None
        )

def apply_filters(df, search_term, filters):
    """Aplica os filtros ao dataframe com tratamento melhorado de erros"""
    filtered_df = df.copy()
    
    # Aplicar busca por termo livre (suporte a m√∫ltiplos termos separados por ;)
    if search_term:
        search_columns = ['objeto', 'unidade', 'observacoes', 'todos_termos', 'descricao situacao edital', 'objeto_processada']
        # Filtra apenas colunas que existem no DataFrame
        search_columns = [col for col in search_columns if col in df.columns]
        
        if search_columns:  # S√≥ procede se houver colunas para buscar
            # Verifica se h√° m√∫ltiplos termos separados por ponto e v√≠rgula
            if ';' in search_term:
                search_terms = [term.strip().lower() for term in search_term.split(';') if term.strip()]
                
                # Cria m√°scara para buscar qualquer um dos termos (OR logic)
                mask = pd.Series(False, index=filtered_df.index)
                for term in search_terms:
                    term_mask = pd.Series(False, index=filtered_df.index)
                    for col in search_columns:
                        # Converte a coluna para string e trata valores nulos
                        term_mask |= filtered_df[col].fillna('').astype(str).str.lower().str.contains(term, na=False)
                    mask |= term_mask
                
                filtered_df = filtered_df[mask]
            else:
                # Busca por termo √∫nico
                mask = pd.Series(False, index=filtered_df.index)
                search_term = search_term.lower().strip()
                for col in search_columns:
                    # Converte a coluna para string e trata valores nulos
                    mask |= filtered_df[col].fillna('').astype(str).str.lower().str.contains(search_term, na=False)
                filtered_df = filtered_df[mask]
    
    # Aplicar filtros espec√≠ficos
    for column, value in filters.items():
        if value not in ['Todas', 'Todos'] and column in filtered_df.columns:
            if column == 'valor_range':
                min_val, max_val = value
                filtered_df = filtered_df[
                    (filtered_df['valor estimado'].fillna(0).astype(float) >= min_val) & 
                    (filtered_df['valor estimado'].fillna(0).astype(float) <= max_val)
                ]
            elif column == 'ano':
                # Trata o ano como n√∫mero
                filtered_df = filtered_df[filtered_df[column].fillna(0).astype(float) == float(value)]
            else:
                # Para outros campos, faz compara√ß√£o de strings
                filtered_df = filtered_df[filtered_df[column].fillna('').astype(str) == str(value)]
    
    return filtered_df

def create_charts(df):
    """Cria gr√°ficos de an√°lise"""
    col1, col2 = st.columns(2)
    
    with col1:
        if 'unidade' in df.columns and len(df) > 0:
            # Gr√°fico de quantidade de editais por coordenadoria
            unidade_counts = df['unidade'].value_counts().head(10)
            
            if len(unidade_counts) > 0:
                fig_bar = px.bar(
                    x=unidade_counts.values,
                    y=unidade_counts.index,
                    orientation='h',
                    title="üìä Quantidade de Editais por Coordenadoria",
                    labels={'x': 'Quantidade', 'y': 'Coordenadoria'},
                    color=unidade_counts.values,
                    color_continuous_scale='Blues'
                )
                fig_bar.update_layout(
                    height=400,
                    showlegend=False,
                    yaxis={'categoryorder': 'total ascending'}
                )
                st.plotly_chart(fig_bar, use_container_width=True)
    
    with col2:
        if 'unidade' in df.columns and 'valor estimado' in df.columns and len(df) > 0:
            # Gr√°fico das maiores coordenadorias por valor estimado
            unidade_valores = df.groupby('unidade')['valor estimado'].sum().sort_values(ascending=False).head(8)
            
            if len(unidade_valores) > 0:
                fig_pie = px.pie(
                    values=unidade_valores.values,
                    names=unidade_valores.index,
                    title="üí∞ Maiores Coordenadorias por Valor Estimado"
                )
                fig_pie.update_layout(height=400)
                st.plotly_chart(fig_pie, use_container_width=True)
    
    # Gr√°fico temporal se houver dados de data
    if 'ano' in df.columns and len(df) > 0:
        st.markdown("### üìà Evolu√ß√£o Temporal")
        temporal_data = df['ano'].value_counts().sort_index()
        
        if len(temporal_data) > 0:
            fig_line = px.line(
                x=temporal_data.index,
                y=temporal_data.values,
                title="Editais por Ano",
                labels={'x': 'Ano', 'y': 'Quantidade de Editais'},
                markers=True
            )
            fig_line.update_layout(height=400)
            st.plotly_chart(fig_line, use_container_width=True)

def display_data_table(df):
    """Exibe a tabela de dados com op√ß√µes de visualiza√ß√£o"""
    st.markdown("### üìã Dados dos Editais")
    
    # Op√ß√µes de visualiza√ß√£o
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        # Colunas padr√£o espec√≠ficas atualizadas com novos nomes
        default_columns = []
        preferred_columns = ['Predi√ß√£o CIC', 'Predi√ß√£o STI', 'unidade', 'objeto', 'valor estimado', 'observacoes', 'todos_termos']
        for col in preferred_columns:
            if col in df.columns:
                default_columns.append(col)
        
        # Se n√£o encontrou nenhuma das preferidas, usa as primeiras 5 colunas
        if len(default_columns) == 0:
            default_columns = df.columns.tolist()[:5]
        
        columns_to_show = st.multiselect(
            "üìä Selecionar colunas para exibir",
            options=df.columns.tolist(),
            default=default_columns
        )
    
    with col2:
        rows_per_page = st.selectbox(
            "üìÑ Linhas por p√°gina",
            [10, 25, 50, 100],
            index=1
        )
    
    with col3:
        export_button = st.button("üì• Exportar Filtrados")
    
    if columns_to_show:
        # Pagina√ß√£o
        total_rows = len(df)
        total_pages = (total_rows - 1) // rows_per_page + 1
        
        if total_pages > 1:
            page = st.number_input(
                f"P√°gina (1 de {total_pages})",
                min_value=1,
                max_value=total_pages,
                value=1
            ) - 1
        else:
            page = 0
        
        start_idx = page * rows_per_page
        end_idx = start_idx + rows_per_page
        
        # Exibir dados
        display_df = df[columns_to_show].iloc[start_idx:end_idx].copy()
        
        # Formata√ß√£o condicional para valores monet√°rios
        if 'valor estimado' in display_df.columns:
            display_df['valor estimado'] = display_df['valor estimado'].apply(
                lambda x: f"R$ {x:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.') if pd.notna(x) else 'N/A'
            )
        
        # Formata√ß√£o para pontua√ß√µes
        for col in ['pontuacao', 'pontuacao_final']:
            if col in display_df.columns:
                display_df[col] = display_df[col].apply(
                    lambda x: f"{x:.2f}" if pd.notna(x) else 'N/A'
                )
        
        # Preenchimento autom√°tico para observa√ß√µes em branco
        if 'observacoes' in display_df.columns:
            display_df['observacoes'] = display_df['observacoes'].apply(
                lambda x: x if pd.notna(x) and str(x).strip() != '' else 'Classifica√ß√£o baseada em Termos Chave'
            )
        
        st.dataframe(
            display_df,
            use_container_width=True,
            height=400
        )
        
        # Informa√ß√µes da pagina√ß√£o
        st.info(f"Exibindo {start_idx + 1}-{min(end_idx, total_rows)} de {total_rows} registros")
        
        # Checkbox para mostrar apenas diverg√™ncias
        if 'Predi√ß√£o CIC' in df.columns and 'Predi√ß√£o STI' in df.columns:
            show_only_divergences = st.checkbox(
                "üìä Exibir apenas diverg√™ncias entre 'Predi√ß√£o CIC' e 'Predi√ß√£o STI'"
            )
            
            if show_only_divergences:
                # Filtra apenas as linhas onde as predi√ß√µes s√£o diferentes
                divergent_df = df[df['Predi√ß√£o CIC'] != df['Predi√ß√£o STI']]
                
                if len(divergent_df) > 0:
                    st.markdown("### üîç Diverg√™ncias Identificadas")
                    st.info(f"üìã Encontradas {len(divergent_df):,} diverg√™ncias de {len(df):,} registros ({(len(divergent_df)/len(df)*100):.2f}%)")
                    
                    # Recalcula pagina√ß√£o para diverg√™ncias
                    div_total_rows = len(divergent_df)
                    div_total_pages = (div_total_rows - 1) // rows_per_page + 1
                    
                    if div_total_pages > 1:
                        div_page = st.number_input(
                            f"P√°gina de Diverg√™ncias (1 de {div_total_pages})",
                            min_value=1,
                            max_value=div_total_pages,
                            value=1,
                            key="divergences_page"
                        ) - 1
                    else:
                        div_page = 0
                    
                    div_start_idx = div_page * rows_per_page
                    div_end_idx = div_start_idx + rows_per_page
                    
                    # Exibir dados de diverg√™ncias
                    div_display_df = divergent_df[columns_to_show].iloc[div_start_idx:div_end_idx].copy()
                    
                    # Aplicar formata√ß√µes
                    if 'valor estimado' in div_display_df.columns:
                        div_display_df['valor estimado'] = div_display_df['valor estimado'].apply(
                            lambda x: f"R$ {x:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.') if pd.notna(x) else 'N/A'
                        )
                    
                    if 'observacoes' in div_display_df.columns:
                        div_display_df['observacoes'] = div_display_df['observacoes'].apply(
                            lambda x: x if pd.notna(x) and str(x).strip() != '' else 'Classifica√ß√£o baseada em Termos Chave'
                        )
                    
                    st.dataframe(
                        div_display_df,
                        use_container_width=True,
                        height=400
                    )
                    
                    st.info(f"Exibindo {div_start_idx + 1}-{min(div_end_idx, div_total_rows)} de {div_total_rows} diverg√™ncias")
                else:
                    st.success("‚úÖ Nenhuma diverg√™ncia encontrada! Todas as predi√ß√µes est√£o alinhadas.")
        
        # Funcionalidade de exporta√ß√£o
        if export_button:
            csv = df[columns_to_show].to_csv(index=False)
            st.download_button(
                label="üì• Download CSV",
                data=csv,
                file_name=f"editais_filtrados_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )

def show_help_tab():
    """Mostra a aba de ajuda e instru√ß√µes"""
    st.markdown("""
    # üìö Como Usar o Projeto Predi√ß√£o de Editais - CIC2025
    
    ## üöÄ In√≠cio R√°pido
    
    ### 1. Escopo da Base de Dados
    - **52.429 editais** analisados e classificados
    - **R$ 244 bilh√µes** em valor total estimado
    - **729 coordenadorias/unidades** organizacionais mapeadas
    - **14 categorias originais** + **2 novas categorias** criadas
    - Sistema carrega amostras para consulta interativa
    
    ### 2. Dados Autom√°ticos
    - Os dados s√£o carregados automaticamente do SharePoint TCERJ
    - Sistema atualiza a cada 5 minutos para manter dados frescos
    - N√£o √© necess√°rio fazer upload manual (se configurado corretamente)
    
    ### 3. Navega√ß√£o
    O sistema possui **3 abas principais**:
    - **üìä An√°lise de Dados**: Visualiza√ß√£o principal com filtros e tabelas
    - **üìà Dashboard**: Gr√°ficos e estat√≠sticas detalhadas
    - **üìö Ajuda**: Esta se√ß√£o com instru√ß√µes
    
    ## üîç Funcionalidades de Pesquisa
    
    ### Busca por Termo Livre
    - Use a caixa "üîé Buscar por termo" na barra lateral
    - Busca em m√∫ltiplas colunas: objeto, unidade, observa√ß√µes, todos os termos
    - **Busca m√∫ltipla**: Use ponto e v√≠rgula (;) para buscar v√°rios termos
    - **Exemplo**: "educa√ß√£o; sa√∫de; infraestrutura" busca qualquer um dos termos
    - **N√£o diferencia mai√∫sculas de min√∫sculas**
    
    ### Exemplos de Busca M√∫ltipla
    - **Por √°rea tem√°tica**: "educa√ß√£o; ensino; escola"
    - **Por tipo de obra**: "constru√ß√£o; reforma; amplia√ß√£o"
    - **Por localiza√ß√£o**: "rio de janeiro; niter√≥i; duque de caxias"
    - **Termos relacionados**: "hospital; posto de sa√∫de; upa"
    
    ### Filtros Espec√≠ficos
    - **üìÇ Nova Classifica√ß√£o**: Filtra pela classifica√ß√£o final atualizada
    - **üîÆ Predi√ß√£o CIC**: Filtra pela predi√ß√£o da Coordenadoria de Informa√ß√µes Estrat√©gicas
    - **üîÑ Predi√ß√£o STI**: Filtra pela predi√ß√£o original da Secretaria de Tecnologia da Informa√ß√£o
    - **üè¢ Unidade**: Filtra por coordenadoria/unidade espec√≠fica
    - **üìã Modalidade**: Filtra por tipo de modalidade licitat√≥ria
    - **üìÖ Ano**: Filtra por ano espec√≠fico
    - **üí∞ Valor**: Use o slider para definir faixa de valores
    
    ## üìä Visualiza√ß√µes Dispon√≠veis
    
    ### M√©tricas Principais
    - **Total de Editais**: 52.429 editais na base completa
    - **Valor Total Estimado**: R$ 244 bilh√µes em investimentos
    - **Categorias √önicas**: 14 categorias de classifica√ß√£o
    - **Unidades √önicas**: 729 coordenadorias/unidades mapeadas
    
    ### An√°lise de Categoriza√ß√£o
    - **Editais Complexos**: 8.574 editais em m√∫ltiplas categorias (16,35%)
    - **Editais Simples**: 43.855 editais em categoria √∫nica (83,65%)
    - **Mudan√ßas nas Predi√ß√µes**: Percentual de casos onde Predi√ß√£o CIC difere da Predi√ß√£o STI
    - **Qualidade da Base**: Maioria com classifica√ß√£o √∫nica (mais confi√°vel)
    - **Desafio de Classifica√ß√£o**: 1 em cada 6 editais tem m√∫ltiplas categorias
    - **An√°lise de Diverg√™ncias**: Checkbox para visualizar apenas casos com predi√ß√µes diferentes
    
    ### Gr√°ficos Interativos
    - **Quantidade por Coordenadoria**: Barras horizontais com ranking de unidades
    - **Maiores Coordenadorias**: Gr√°fico de pizza por valor estimado
    - **Evolu√ß√£o Temporal**: Linha do tempo com tend√™ncias anuais
    
    ## üìã Tabela de Dados
    
    ### Personaliza√ß√£o da Visualiza√ß√£o
    - **Colunas Padr√£o**: Predi√ß√£o CIC, Predi√ß√£o STI, Unidade, Objeto, Valor Estimado, Observa√ß√µes, Todos os Termos
    - **Sele√ß√£o Personalizada**: Escolha quais campos exibir conforme necessidade
    - **Pagina√ß√£o**: Configure quantas linhas ver por p√°gina (10, 25, 50, 100)
    - **Exporta√ß√£o**: Baixe os dados filtrados em CSV
    - **An√°lise de Diverg√™ncias**: Checkbox para mostrar apenas casos onde as predi√ß√µes diferem
    - **Observa√ß√µes Autom√°ticas**: Campos em branco s√£o preenchidos automaticamente com "Classifica√ß√£o baseada em Termos Chave"
    
    ### Formata√ß√£o Inteligente
    - Valores monet√°rios formatados automaticamente (R$ 1.234.567,89)
    - Datas em formato brasileiro
    - Navega√ß√£o intuitiva entre p√°ginas
    - Preenchimento autom√°tico de observa√ß√µes em branco
    - Remo√ß√£o autom√°tica de duplicatas (ignorando coluna classificacao_final)
    
    ## üí° Dicas de Uso
    
    ### Para Gestores CIC
    1. **An√°lise Comparativa**: Compare Predi√ß√£o CIC vs Predi√ß√£o STI para avaliar evolu√ß√£o metodol√≥gica
    2. **Foco em Complexidade**: Concentre-se nos 8.574 editais com m√∫ltiplas categorias (16,35%)
    3. **An√°lise de Diverg√™ncias**: Use o checkbox para ver apenas casos onde CIC e STI divergem
    4. **Monitoramento de Mudan√ßas**: Acompanhe o percentual de casos com predi√ß√µes diferentes entre as metodologias
    5. **An√°lise por Coordenadoria**: Monitore performance e volume por unidade organizacional
    6. **Observa√ß√µes Autom√°ticas**: Campos em branco mostram "Classifica√ß√£o baseada em Termos Chave"
    7. **Impacto Financeiro**: Use filtros de valor para focar em editais de maior relev√¢ncia
    8. **Qualidade da Base**: Aproveite que 83,65% t√™m classifica√ß√£o √∫nica (mais confi√°veis)
    
    ### Para Analistas
    1. **Busca nos Termos-Chave**: Use a coluna "todos_termos" para entender crit√©rios de classifica√ß√£o
    2. **Busca M√∫ltipla**: Use ";" para buscar v√°rios termos simultaneamente (ex: "educa√ß√£o; sa√∫de; transporte")
    3. **An√°lise de Diverg√™ncias**: Foque nos casos onde Predi√ß√£o CIC ‚â† Predi√ß√£o STI para entender diferen√ßas metodol√≥gicas
    4. **Compara√ß√£o de Metodologias**: Analise sistematicamente as diferen√ßas entre as abordagens CIC e STI
    5. **An√°lise de Observa√ß√µes**: Verifique observa√ß√µes espec√≠ficas vs classifica√ß√µes autom√°ticas
    6. **An√°lise de Coordenadorias**: Identifique unidades com mais editais ou maior valor
    7. **Valida√ß√£o do Modelo**: Foque nos 16,35% complexos para melhorar algoritmos
    8. **Baseline de Qualidade**: Use os 83,65% simples como refer√™ncia de classifica√ß√£o correta
    9. **Dados Limpos**: Sistema remove automaticamente duplicatas para an√°lises mais precisas
    
    ## ‚ö° Funcionalidades Avan√ßadas
    
    ### Performance e Atualiza√ß√£o
    - Sistema otimizado para grandes volumes de dados
    - Cache inteligente com atualiza√ß√£o autom√°tica
    - Dados sempre sincronizados com a planilha principal
    
    ### Dados Suportados
    - **Classifica√ß√µes Comparativas**: Nova vs Antiga classifica√ß√£o para an√°lise evolutiva
    - **Observa√ß√µes Inteligentes**: Preenchimento autom√°tico para campos em branco
    - **Termos de Classifica√ß√£o**: An√°lise dos termos-chave utilizados na classifica√ß√£o
    - **Unidades Organizacionais**: Classifica√ß√£o por coordenadoria/estrutura do √≥rg√£o
    - **Valores Estimados**: An√°lise financeira completa dos editais
    - **Dados Temporais**: An√°lise de tend√™ncias por ano
    - **Busca Avan√ßada**: Pesquisa em m√∫ltiplas colunas com suporte a termos m√∫ltiplos
    
    ## üîß Solu√ß√£o de Problemas
    
    ### Problemas Comuns
    - **Dados n√£o carregam**: Verifique sua conex√£o com a internet
    - **Dados desatualizados**: Clique em "Recarregar dados" ou espere a atualiza√ß√£o autom√°tica
    - **Filtros sem resultado**: Verifique se os crit√©rios n√£o est√£o muito restritivos
    - **Gr√°ficos em branco**: Alguns campos podem estar vazios nos dados
    
    ### Conex√£o com Google Sheets
    - Os dados s√£o carregados diretamente da planilha oficial
    - Sistema detecta automaticamente mudan√ßas na estrutura
    - Cache otimizado para performance e economia de recursos
    
    ### Suporte
    Para d√∫vidas t√©cnicas ou sugest√µes de melhorias, entre em contato com a equipe de desenvolvimento.
    
    ---
    
    > üíº **Projeto Predi√ß√£o de Editais - CIC2025 | TCERJ**  
    > **üìä Base completa:** 52.429 editais | R$ 244 bilh√µes | 729 unidades | 14+2 categorias  
    > Ferramenta de Consulta de Editais | Coordenadoria de Informa√ß√µes Estrat√©gicas
    """)

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # Header principal
    st.markdown("""
    <div class="main-header">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <h1>üìä Projeto Predi√ß√£o de Editais - CIC2025</h1>
                <p style="color: #e2e8f0; margin: 0.5rem 0 0 0;">
                    Ferramenta de Consulta de Editais
                </p>
            </div>
            <div style="margin-left: 2rem;">
                <img src="https://tcerj365-my.sharepoint.com/:i:/g/personal/emanuellipc_tcerj_tc_br/EU_4T9vkz1BEmtF4qGFPdekB71dUQ1f_isaIoampssa5WQ?e=33qdcT" 
                     alt="CIC TCERJ Logo" 
                     style="height: 80px; width: auto; max-width: 150px; object-fit: contain;"
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                <!-- Fallback caso a imagem n√£o carregue -->
                <div style="width: 120px; height: 80px; background: rgba(255,255,255,0.1); border-radius: 8px; display: none; align-items: center; justify-content: center; color: white; font-size: 0.8rem;">
                    LOGO<br>CIC TCERJ
                </div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Estat√≠sticas gerais da base completa
    st.markdown("""
    <div class="alert-info">
        <h4>üìà Escopo da Base de Dados Completa</h4>
        <div style="display: flex; justify-content: space-around; text-align: center; margin: 1rem 0;">
            <div>
                <strong style="font-size: 1.5rem; color: #1e40af;">52.429</strong><br>
                <span style="color: #64748b;">Editais Analisados</span>
            </div>
            <div>
                <strong style="font-size: 1.5rem; color: #1e40af;">R$ 244 Bilh√µes</strong><br>
                <span style="color: #64748b;">Valor Total Estimado</span>
            </div>
            <div>
                <strong style="font-size: 1.5rem; color: #1e40af;">729</strong><br>
                <span style="color: #64748b;">Unidades Mapeadas</span>
            </div>
            <div>
                <strong style="font-size: 1.5rem; color: #1e40af;">14</strong><br>
                <span style="color: #64748b;">Categorias</span>
            </div>
            <div>
                <strong style="font-size: 1.5rem; color: #1e40af;">2</strong><br>
                <span style="color: #64748b;">Novas Categorias</span>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Op√ß√µes de carregamento de dados
    st.markdown("### üìÅ Fonte dos Dados")
    data_source = st.radio(
        "Escolha como carregar os dados:",
        ["üîó SharePoint TCERJ (Autom√°tico)", "üìÑ Upload de Arquivo CSV"],
        horizontal=True
    )
    
    df = None
    error = None
    
    if data_source == "üîó SharePoint TCERJ (Autom√°tico)":
        # Bot√£o para for√ßar recarregamento dos dados
        col1, col2, col3 = st.columns([1, 1, 2])
        with col1:
            if st.button("üîÑ Recarregar Dados"):
                st.cache_data.clear()
                st.rerun()
        
        with col2:
            st.markdown("*Atualiza√ß√£o autom√°tica a cada 5min*")
        
        # Diagn√≥stico da URL
        st.sidebar.markdown("### üîó Status da Conex√£o")
        st.sidebar.markdown(f"**URL da Planilha:** [Link TCERJ]({SHAREPOINT_URL})")
        
        # Carregamento dos dados do SharePoint
        with st.spinner("üîÑ Carregando dados do SharePoint TCERJ..."):
            df, error = load_data_from_sharepoint()
    
    else:  # Upload de arquivo
        st.markdown("""
        <div class="alert-info">
            üí° <strong>Dica para arquivos com formata√ß√£o problem√°tica:</strong><br>
            ‚Ä¢ Abra o arquivo no Excel ou Google Sheets<br>
            ‚Ä¢ Fa√ßa uma limpeza dos dados (remover caracteres especiais)<br>
            ‚Ä¢ Salve como CSV (UTF-8) limpo<br>
            ‚Ä¢ Fa√ßa upload do arquivo limpo aqui
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader(
            "üìÑ Selecione o arquivo CSV com os editais",
            type=['csv'],
            help="Arquivo CSV com encoding UTF-8 recomendado"
        )
        
        if uploaded_file is not None:
            with st.spinner("üîÑ Processando arquivo..."):
                try:
                    # Primeira tentativa - encoding UTF-8
                    df = pd.read_csv(
                        uploaded_file,
                        encoding='utf-8',
                        on_bad_lines='skip',
                        engine='python',
                        dtype=str
                    )
                    
                    # Limpeza b√°sica
                    df = df.dropna(how='all')
                    df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
                    
                    st.success(f"‚úÖ Arquivo carregado! {len(df)} linhas encontradas.")
                    
                except UnicodeDecodeError:
                    try:
                        # Segunda tentativa - encoding latin-1
                        uploaded_file.seek(0)
                        df = pd.read_csv(
                            uploaded_file,
                            encoding='latin-1',
                            on_bad_lines='skip',
                            engine='python',
                            dtype=str
                        )
                        df = df.dropna(how='all')
                        st.warning(f"‚ö†Ô∏è Arquivo carregado com encoding latin-1. {len(df)} linhas encontradas.")
                        
                    except Exception as e2:
                        error = f"Erro de encoding: {str(e2)}"
                        
                except Exception as e:
                    error = f"Erro ao processar arquivo: {str(e)}"
        
        else:
            st.info("üëÜ Selecione um arquivo CSV para come√ßar a an√°lise")
            return
    
    # Se houve erro, mostrar diagn√≥stico
    if error:
        st.error(f"‚ùå {error}")
        
        # Instru√ß√µes espec√≠ficas baseadas no tipo de erro
        if "conex√£o" in error.lower() or "timeout" in error.lower():
            st.markdown("""
            <div class="alert-warning">
                <h4>üåê Problema de Conectividade</h4>
                <p><strong>Solu√ß√µes alternativas:</strong></p>
                <ul>
                    <li>Mude para "üìÑ Upload de Arquivo CSV" acima</li>
                    <li>Baixe a planilha como CSV e fa√ßa upload manual</li>
                    <li>Verifique sua conex√£o com a internet</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
            
        elif "permission" in error.lower() or "403" in error.lower() or "autentica√ß√£o" in error.lower():
            st.markdown("""
            <div class="alert-warning">
                <h4>üîí Problema de Permiss√£o do SharePoint TCERJ</h4>
                <p><strong>O SharePoint corporativo requer configura√ß√µes especiais:</strong></p>
                <h5>Op√ß√£o 1: Configurar Acesso P√∫blico (Recomendado)</h5>
                <ol>
                    <li>Abra a planilha no SharePoint</li>
                    <li>Clique em "Compartilhar" no canto superior direito</li>
                    <li>Clique em "Qualquer pessoa com o link pode visualizar"</li>
                    <li>Defina permiss√£o como "Visualizar" apenas</li>
                    <li>Copie o novo link p√∫blico gerado</li>
                    <li>Atualize o c√≥digo com o novo link</li>
                </ol>
                <h5>Op√ß√£o 2: Usar Upload Manual</h5>
                <ol>
                    <li>Baixe a planilha como Excel (.xlsx)</li>
                    <li>Abra no Excel e salve como CSV (UTF-8)</li>
                    <li>Use a op√ß√£o "üìÑ Upload de Arquivo CSV" acima</li>
                </ol>
                <h5>Op√ß√£o 3: Exportar para Servi√ßo P√∫blico</h5>
                <ul>
                    <li>Exporte para Google Sheets p√∫blico</li>
                    <li>Ou coloque o arquivo em reposit√≥rio GitHub</li>
                    <li>Use um desses servi√ßos no lugar do SharePoint corporativo</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
            
        else:
            st.markdown("""
            <div class="alert-warning">
                <h4>‚ö†Ô∏è Problema de Formata√ß√£o dos Dados</h4>
                <p><strong>Solu√ß√µes recomendadas:</strong></p>
                <ol>
                    <li><strong>Limpar dados no Google Sheets:</strong>
                        <ul>
                            <li>Abra a planilha original</li>
                            <li>Selecione todos os dados (Ctrl+A)</li>
                            <li>Copie para uma nova planilha</li>
                            <li>Use "Colar especial" ‚Üí "Valores apenas"</li>
                            <li>Baixe como CSV e fa√ßa upload aqui</li>
                        </ul>
                    </li>
                    <li><strong>Usar Excel para limpeza:</strong>
                        <ul>
                            <li>Abra o arquivo no Excel</li>
                            <li>Use "Localizar e Substituir" para remover caracteres estranhos</li>
                            <li>Salve como CSV (UTF-8)</li>
                        </ul>
                    </li>
                    <li><strong>Hospedagem alternativa:</strong>
                        <ul>
                            <li>Coloque o CSV limpo no GitHub</li>
                            <li>Use a URL raw no c√≥digo</li>
                        </ul>
                    </li>
                </ol>
            </div>
            """, unsafe_allow_html=True)
        
        return
    
    # Se os dados foram carregados com sucesso
    if df is not None and len(df) > 0:
        st.markdown(f"""
        <div class="alert-success">
            ‚úÖ <strong>Dados carregados com sucesso!</strong><br>
            üìã 52.429 editais encontrados | 8.574 editais em mais de uma categoria (16,35%) | 43.855 editais em apenas uma categoria (83,65%) | üïê {datetime.now().strftime('%H:%M:%S')}
        </div>
        """, unsafe_allow_html=True)
        
        # Convers√µes de tipos mais seguras
        if 'data realizacao licitacao' in df.columns:
            df['data realizacao licitacao'] = pd.to_datetime(df['data realizacao licitacao'], errors='coerce')
        
        if 'ano' in df.columns:
            df['ano'] = pd.to_numeric(df['ano'], errors='coerce')
        
        if 'valor estimado' in df.columns:
            # Limpeza de valores monet√°rios
            df['valor estimado'] = df['valor estimado'].astype(str).str.replace(r'[^\d.,]', '', regex=True)
            df['valor estimado'] = df['valor estimado'].str.replace(',', '.', regex=False)
            df['valor estimado'] = pd.to_numeric(df['valor estimado'], errors='coerce')
        
        if 'pontuacao' in df.columns:
            df['pontuacao'] = df['pontuacao'].astype(str).str.replace(',', '.', regex=False)
            df['pontuacao'] = pd.to_numeric(df['pontuacao'], errors='coerce')
            
        if 'pontuacao_final' in df.columns:
            df['pontuacao_final'] = df['pontuacao_final'].astype(str).str.replace(',', '.', regex=False)
            df['pontuacao_final'] = pd.to_numeric(df['pontuacao_final'], errors='coerce')
        
        # Processamento da coluna observacoes - preenche valores em branco
        if 'observacoes' in df.columns:
            df['observacoes'] = df['observacoes'].apply(
                lambda x: x if pd.notna(x) and str(x).strip() != '' else 'Classifica√ß√£o baseada em Termos Chave'
            )
        
        # Renomea√ß√£o de colunas espec√≠ficas
        column_renames = {
            'classificacao_final - Copiar': 'Predi√ß√£o CIC',
            'predicao classificacao': 'Predi√ß√£o STI'
        }
        
        for old_name, new_name in column_renames.items():
            if old_name in df.columns:
                df = df.rename(columns={old_name: new_name})
        
        # Remo√ß√£o de duplicatas ignorando a coluna 'classificacao_final'
        columns_for_dedup = [col for col in df.columns if col != 'classificacao_final']
        if columns_for_dedup:
            df = df.drop_duplicates(subset=columns_for_dedup, keep='first')
        
        # Informa√ß√µes dos dados na sidebar
        st.sidebar.markdown("### üìä Informa√ß√µes dos Dados")
        
        # Status da conex√£o com √≠cone verde
        if data_source == "üîó SharePoint TCERJ (Autom√°tico)":
            st.sidebar.markdown("**Fonte:** üîó SharePoint TCERJ (Autom√°tico) üü¢")
        else:
            st.sidebar.markdown("**Fonte:** üìÑ Upload Manual üîµ")
        
        # Informa√ß√µes estat√≠sticas fixas da base completa
        st.sidebar.markdown("**Total de Editais:** 52.429")
        st.sidebar.markdown("**Total de Categorias:** 14") 
        st.sidebar.markdown("**Total Estimado:** R$ 244 bilh√µes")
        
        # **CRIA√á√ÉO DOS FILTROS**
        st.sidebar.markdown("### üîç Filtros de Pesquisa")
        
        # Filtro por texto livre
        search_term = st.sidebar.text_input(
            "üîé Buscar por termo (objeto, ente, etc.)",
            placeholder="Digite aqui para buscar... (use ; para m√∫ltiplos termos)"
        )
        
        # Filtros espec√≠ficos
        filters = {}
        
        # Nova Classifica√ß√£o (antes Classifica√ß√£o Final) - PRIMEIRO
        if 'classificacao_final' in df.columns:
            classificacoes = ['Todas'] + sorted(df['classificacao_final'].dropna().unique().tolist())
            filters['classificacao_final'] = st.sidebar.selectbox(
                "üìÇ Nova Classifica√ß√£o",
                classificacoes
            )
        
        # Predi√ß√£o CIC
        if 'Predi√ß√£o CIC' in df.columns:
            predicoes_cic = ['Todas'] + sorted(df['Predi√ß√£o CIC'].dropna().unique().tolist())
            filters['Predi√ß√£o CIC'] = st.sidebar.selectbox(
                "üîÆ Predi√ß√£o CIC",
                predicoes_cic
            )
        
        # Predi√ß√£o STI
        if 'Predi√ß√£o STI' in df.columns:
            predicoes_sti = ['Todas'] + sorted(df['Predi√ß√£o STI'].dropna().unique().tolist())
            filters['Predi√ß√£o STI'] = st.sidebar.selectbox(
                "üîÑ Predi√ß√£o STI",
                predicoes_sti
            )
        
        if 'unidade' in df.columns:
            unidades = ['Todas'] + sorted(df['unidade'].dropna().unique().tolist())
            filters['unidade'] = st.sidebar.selectbox(
                "üè¢ Unidade",
                unidades
            )
        
        if 'ente' in df.columns:
            entes = ['Todos'] + sorted(df['ente'].dropna().unique().tolist())
            filters['ente'] = st.sidebar.selectbox(
                "üèõÔ∏è Ente",
                entes
            )
        
        if 'modalidade' in df.columns:
            modalidades = ['Todas'] + sorted(df['modalidade'].dropna().unique().tolist())
            filters['modalidade'] = st.sidebar.selectbox(
                "üìã Modalidade",
                modalidades
            )
        
        if 'ano' in df.columns:
            anos_disponiveis = sorted(df['ano'].dropna().unique().tolist())
            if anos_disponiveis:
                filters['ano'] = st.sidebar.selectbox(
                    "üìÖ Ano",
                    ['Todos'] + [str(int(ano)) for ano in anos_disponiveis]
                )
        
        # Filtro por valor
        if 'valor estimado' in df.columns:
            valor_min = float(df['valor estimado'].min()) if not df['valor estimado'].isna().all() else 0
            valor_max = float(df['valor estimado'].max()) if not df['valor estimado'].isna().all() else 1000000
            
            if valor_max > valor_min:
                valor_range = st.sidebar.slider(
                    "üí∞ Faixa de Valor Estimado (R$)",
                    min_value=valor_min,
                    max_value=valor_max,
                    value=(valor_min, valor_max),
                    format="R$ %.0f"
                )
                filters['valor_range'] = valor_range
        
        # Aplica√ß√£o dos filtros
        filtered_df = apply_filters(df, search_term, filters)
        
        # Cria√ß√£o das abas ap√≥s o processamento dos filtros
        tab1, tab2, tab3 = st.tabs(["üìä An√°lise de Dados", "üìà Dashboard", "üìö Ajuda"])
        
        with tab1:
            # M√©tricas de vis√£o geral
            st.markdown("### üìä Dados Carregados para An√°lise")
            create_overview_metrics(filtered_df)
            
            # Informa√ß√µes adicionais sobre categoriza√ß√£o
            st.markdown("### üìà An√°lise de Categoriza√ß√£o")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    label="üìã Editais em M√∫ltiplas Categorias",
                    value="8.574",
                    delta="16,35%"
                )
            
            with col2:
                st.metric(
                    label="üìÑ Editais em Categoria √önica",
                    value="43.855", 
                    delta="83,65%"
                )
            
            with col3:
                # Calcula % de mudan√ßa entre as predi√ß√µes
                if 'Predi√ß√£o CIC' in filtered_df.columns and 'Predi√ß√£o STI' in filtered_df.columns:
                    total_linhas = len(filtered_df)
                    if total_linhas > 0:
                        linhas_diferentes = len(filtered_df[filtered_df['Predi√ß√£o CIC'] != filtered_df['Predi√ß√£o STI']])
                        percentual_mudanca = (linhas_diferentes / total_linhas) * 100
                        
                        st.metric(
                            label="üîÑ Mudan√ßas nas Predi√ß√µes",
                            value=f"{percentual_mudanca:.1f}%",
                            delta=f"{linhas_diferentes:,} casos"
                        )
                    else:
                        st.metric(
                            label="üîÑ Mudan√ßas nas Predi√ß√µes",
                            value="0%",
                            delta="0 casos"
                        )
            
            # Texto explicativo sobre as mudan√ßas
            if 'Predi√ß√£o CIC' in filtered_df.columns and 'Predi√ß√£o STI' in filtered_df.columns:
                total_linhas = len(filtered_df)
                if total_linhas > 0:
                    linhas_diferentes = len(filtered_df[filtered_df['Predi√ß√£o CIC'] != filtered_df['Predi√ß√£o STI']])
                    percentual_mudanca = (linhas_diferentes / total_linhas) * 100
                    
                    st.info(f"üìä **Foram identificadas mudan√ßas em {percentual_mudanca:.1f}% dos casos, onde a predi√ß√£o CIC difere da predi√ß√£o STI.**")
            
            if len(filtered_df) == 0:
                st.warning("‚ö†Ô∏è Nenhum resultado encontrado com os filtros aplicados. Tente ajustar os crit√©rios de busca.")
            else:
                # Exibir informa√ß√µes dos filtros aplicados
                if search_term or any(v not in ['Todas', 'Todos'] for v in filters.values() if isinstance(v, str)):
                    filter_info = f"üîç **Filtros aplicados** - Exibindo {len(filtered_df):,} de 52.429 editais"
                    
                    # Adiciona informa√ß√£o sobre busca m√∫ltipla se aplic√°vel
                    if search_term and ';' in search_term:
                        terms_count = len([term.strip() for term in search_term.split(';') if term.strip()])
                        filter_info += f" | üîé Busca m√∫ltipla: {terms_count} termos"
                    
                    st.info(filter_info)
                
                # Tabela de dados
                display_data_table(filtered_df)
        
        with tab2:
            st.markdown("### üìä Dashboard Anal√≠tico")
            
            if len(filtered_df) > 0:
                # Mostrar informa√ß√£o de filtros se aplicados
                if search_term or any(v not in ['Todas', 'Todos'] for v in filters.values() if isinstance(v, str)):
                    filter_info = f"üîç **Visualizando dados filtrados** - {len(filtered_df):,} de 52.429 editais"
                    
                    # Adiciona informa√ß√£o sobre busca m√∫ltipla se aplic√°vel
                    if search_term and ';' in search_term:
                        terms_count = len([term.strip() for term in search_term.split(';') if term.strip()])
                        filter_info += f" | üîé Busca m√∫ltipla: {terms_count} termos"
                    
                    st.info(filter_info)
                
                # M√©tricas principais
                st.markdown("### üìä Dados Filtrados para An√°lise")
                create_overview_metrics(filtered_df)
                
                # Informa√ß√µes adicionais sobre categoriza√ß√£o
                st.markdown("### üìà An√°lise de Categoriza√ß√£o")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric(
                        label="üìã Editais em M√∫ltiplas Categorias",
                        value="8.574",
                        delta="16,35%"
                    )
                
                with col2:
                    st.metric(
                        label="üìÑ Editais em Categoria √önica",
                        value="43.855", 
                        delta="83,65%"
                    )
                
                with col3:
                    # Calcula % de mudan√ßa entre as predi√ß√µes
                    if 'Predi√ß√£o CIC' in filtered_df.columns and 'Predi√ß√£o STI' in filtered_df.columns:
                        total_linhas = len(filtered_df)
                        if total_linhas > 0:
                            linhas_diferentes = len(filtered_df[filtered_df['Predi√ß√£o CIC'] != filtered_df['Predi√ß√£o STI']])
                            percentual_mudanca = (linhas_diferentes / total_linhas) * 100
                            
                            st.metric(
                                label="üîÑ Mudan√ßas nas Predi√ß√µes",
                                value=f"{percentual_mudanca:.1f}%",
                                delta=f"{linhas_diferentes:,} casos"
                            )
                        else:
                            st.metric(
                                label="üîÑ Mudan√ßas nas Predi√ß√µes",
                                value="0%",
                                delta="0 casos"
                            )
                
                # Texto explicativo sobre as mudan√ßas
                if 'Predi√ß√£o CIC' in filtered_df.columns and 'Predi√ß√£o STI' in filtered_df.columns:
                    total_linhas = len(filtered_df)
                    if total_linhas > 0:
                        linhas_diferentes = len(filtered_df[filtered_df['Predi√ß√£o CIC'] != filtered_df['Predi√ß√£o STI']])
                        percentual_mudanca = (linhas_diferentes / total_linhas) * 100
                        
                        st.info(f"üìä **Foram identificadas mudan√ßas em {percentual_mudanca:.1f}% dos casos, onde a predi√ß√£o CIC difere da predi√ß√£o STI.**")
                
                # Gr√°ficos
                create_charts(filtered_df)
                
                # Estat√≠sticas adicionais
                if 'classificacao_final' in filtered_df.columns:
                    st.markdown("### üìã An√°lise Detalhada por Classifica√ß√£o")
                    
                    classification_stats = filtered_df.groupby('classificacao_final').agg({
                        'valor estimado': ['count', 'sum', 'mean'],
                        'pontuacao': 'mean' if 'pontuacao' in filtered_df.columns else 'count'
                    }).round(2)
                    
                    classification_stats.columns = ['Quantidade', 'Valor Total', 'Valor M√©dio', 'Pontua√ß√£o M√©dia']
                    
                    st.dataframe(
                        classification_stats.sort_values('Quantidade', ascending=False),
                        use_container_width=True
                    )
            else:
                st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel para exibir no dashboard com os filtros aplicados.")
        
        with tab3:
            show_help_tab()
    
    else:
        st.markdown("""
        <div class="alert-info">
            <h3>üëã Bem-vindo ao Projeto Predi√ß√£o de Editais - CIC2025!</h3>
            <p><strong>üìä Nossa base completa cont√©m:</strong></p>
            <ul style="margin: 1rem 0;">
                <li><strong>52.429 editais</strong> analisados e classificados</li>
                <li><strong>R$ 244 bilh√µes</strong> em valor total estimado</li>
                <li><strong>729 unidades</strong> organizacionais mapeadas</li>
                <li><strong>14 categorias</strong> originais + <strong>2 novas categorias</strong></li>
            </ul>
            
            <p><strong>üöÄ Para come√ßar sua consulta:</strong></p>
            <ol>
                <li>üìÅ Selecione uma fonte de dados acima</li>
                <li>üîç Use os filtros para encontrar informa√ß√µes espec√≠ficas</li>
                <li>üìä Explore as visualiza√ß√µes no dashboard</li>
                <li>üì• Exporte os dados filtrados quando necess√°rio</li>
            </ol>
            
            <p><strong>üí° Dica:</strong> Acesse a aba "üìö Ajuda" para instru√ß√µes detalhadas sobre todas as funcionalidades!</p>
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()